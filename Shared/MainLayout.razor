@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<CascadingValue Name="Filters" Value="_filters">
    <app class="flex w-full min-h-screen flex-col bg-neutral-100 text-neutral-800 dark:bg-neutral-800 dark:text-neutral-400">
        <header class="flex flex-row p-2 sticky top-0 z-50 drop-shadow-lg bg-white dark:bg-neutral-900">
            <label class="group flex flex-row flex-1 p-1 rounded-full focus-within:bg-black/5 dark:focus-within:bg-white/5 align-items-center overflow-hidden">
                <input type="text" onblur="this.setAttribute('placeholder', 'Material Symbols for Blazor');" onfocus="this.select(); this.setAttribute('placeholder', 'Search symbols...');" @bind="_filters.Name" @bind:event="onchange" placeholder="Search icons..." class="order-2 peer cursor-pointer focus:cursor-default placeholder-black dark:placeholder-neutral-300 focus:placeholder-neutral-400 text-black dark:text-white focus:text-black dark:focus:text-white p-2 px-1 focus:placeholder-shown:px-4 min-w-0 flex-1 bg-transparent focus:outline-none" />
                <button tabindex="-1" @onclick="@(() => _filters.Name = "")" class="focus:outline-none order-1 peer-placeholder-shown:hidden select-none rounded-full active:bg-black/10 dark:active:bg-white/10">
                    <Icon Name="@Icons.ArrowBack" class="p-2" />
                </button>
            </label>
            <button tabindex="-1" @onclick="ToggleDarkMode" class="focus:outline-none rounded-full select-none active:bg-black/10 dark:active:bg-white/10">
                <Icon Name="@Icons.DarkMode" Fill="@(_filters.DarkMode ? IconFill.Solid : IconFill.None)" class="@(_filters.DarkMode ? "text-amber-500 p-3": "p-3")" />
            </button>
            <button tabindex="-1" @onclick="ToggleFontDownload" class="focus:outline-none -ml-3 xl:ml-0 rounded-full select-none active:bg-black/10 dark:active:bg-white/10">
                <Icon Name="@(_filters.DownloadSvg ? Icons.CodeOff : Icons.Code)" class="p-3" />
            </button>
            <button tabindex="-1" @onclick="ToggleDrawer" class="-ml-3 focus:outline-none -mr-1 xl:ml-0 rounded-full select-none active:bg-black/10 dark:active:bg-white/10">
                <Icon Name="@((_drawer?.Open ?? false) ? Icons.MenuOpen : Icons.Menu)" class=" @((_drawer?.Open ?? false) ? "-scale-x-100 p-3" : "scale-x-100 p-3")" />
            </button>
            <a name="top" class="hidden" />
        </header>
        <div class="flex-1 flex">
            <main class="flex-1">@Body</main>
            <Drawer @ref="@_drawer" OpenChanged="() => Console.WriteLine(_drawer!.Open)">
                <content class="px-5 py-2 pb-16 flex-1">
                    <Settings @bind-Filters="_filters" />
                </content>
            </Drawer>
        </div>
        @if (_coords.Y > 300)
        {
            <a href="#top" class="flex items-center transition-all pr-6 rounded-full bg-primary text-white fixed -translate-x-1/2 bottom-4 left-1/2 z-50 drop-shadow">
                <Icon Name="@Icons.KeyboardArrowUp" class="p-3" />
                <small>Scroll to top</small>
            </a>
        }
    </app>
</CascadingValue>

<ScrollInfo OnScroll="OnScroll" />

<IconManager
    Type="@_filters.DefaultType"
    Weight="@_filters.DefaultWeight"
    Fill="@_filters.DefaultFill"
    Grade="@_filters.DefaultGrade"
    Size="@_filters.DefaultSize"
/>

@code {
    FilterParams _filters = null!;
    Drawer? _drawer;
    (int X, int Y) _coords;

    protected override async Task OnInitializedAsync()
    {
        _filters = new(JSRuntime);

        var filters = await JSRuntime.InvokeAsync<string>(Interops.LocalStorage_GetItem, nameof(_filters));

        if(!string.IsNullOrWhiteSpace(filters))
        {
            var data = JsonSerializer.Deserialize<FilterParamsData>(filters)!;
            _filters = new(JSRuntime, data);
        }
    }

    private void OnScroll((int X, int Y) coords)
    {
        _coords = coords;
    }

    private void ToggleDarkMode()
    {
        _filters.DarkMode = !_filters.DarkMode;
        JSRuntime.InvokeVoidAsync(Interops.DarkMode_Toggle);
        JSRuntime.InvokeVoidAsync(Interops.LocalStorage_SetItem, new object[] { nameof(_filters), JsonSerializer.Serialize(_filters) });
    }

    private void ToggleFontDownload()
    {
        _filters.DownloadSvg = !_filters.DownloadSvg;
        JSRuntime.InvokeVoidAsync(Interops.LocalStorage_SetItem, new object[] { nameof(_filters), JsonSerializer.Serialize(_filters) });
    }

    private void ToggleDrawer()
    {
        _drawer!.Toggle();
    }
}