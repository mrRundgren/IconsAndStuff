@using System.Timers;
@inject IJSRuntime JSRuntime
<p class="p-2 mb-4">
    Symbols are available in three styles and four adjustable variable font styles (fill, weight, grade, and size).
</p>
<EditForm EditContext="_context" class="grid gap-4 p-2">
    <hr class="-mx-4 border-black/10 dark:border-white/20" />
    <div class="flex items-center">
        <div class="flex-1">
            <label class="inline-flex items-center gap-2 cursor-pointer group select-none">
                <InputCheckbox @bind-Value="Filters.UseAsStandard" class="hidden" />
                @if (Filters.UseAsStandard)
                {
                    <Icon Name="@Icons.SelectCheckBox" class="text-primary py-3" />
                }
                else
                {
                    <Icon Name="@Icons.CheckBoxOutlineBlank" class="py-3 text-neutral-500" />
                }
                <span class="block truncate">Copy using IconManager defaults</span>
            </label>
        </div>
    </div>
    <hr class="-mx-4 border-black/10 dark:border-white/20" />
    <div class="flex flex-row items-center gap-2 justify-center">
        <strong class="block mb-2 flex-1">Type</strong>
        <InputRadioGroup @bind-Value="Filters.Type">
            <RadioChip Text="Outlined" Value="@IconType.Outlined" />
            <RadioChip Text="Rounded" Value="@IconType.Rounded" />
            <RadioChip Text="Sharp" Value="@IconType.Sharp" />
        </InputRadioGroup>
    </div>
    <div class="flex flex-row items-center gap-2 justify-center">
        <strong class="block mb-2 flex-1">Fill</strong>
        <InputRadioGroup @bind-Value="Filters.Fill">
            <RadioChip Text="None" Value="@IconFill.None" />
            <RadioChip Text="Solid" Value="@IconFill.Solid" />
        </InputRadioGroup>
    </div>
    <hr class="-mx-4 border-black/10 dark:border-white/20" />
    <div>
        <strong class="block mb-2">Weight: @Filters.Weight.Value()</strong>
        <label class="input-slider">
            <input type="range" @bind-value="@_weightInt" @bind-value:event="oninput" @onchange="ValueChanged" min="@((int)IconWeight.W100)" max="@((int)IconWeight.W700)" step="1" />
            <progress @bind-value="@_weightInt" @bind-value:event="onchange" max="@((int)IconWeight.W700)" />
        </label>
    </div>
    <div>
        <strong class="@(Filters.DownloadSvg && (Filters.Grade == IconGrade.Min) ? "text-red-700" : "")">Grade: @Filters.Grade.Value()</strong>
        <label class="input-slider">
            <input type="range" @bind-value="@_gradeInt" @bind-value:event="oninput" @onchange="ValueChanged" min="@((int)IconGrade.Min)" max="@((int)IconGrade.Max)" step="1" />
            <progress @bind-value="@_gradeInt" @bind-value:event="onchange" max="@((int)IconGrade.Max)" />
        </label>
    </div>
    <div>
        <strong class="@(Filters.DownloadSvg && (Filters.Size == IconSize.MD || Filters.Size == IconSize.XXL || Filters.Size == IconSize.XXXL) ? "text-red-700" : "")">Size: @(Filters.Size.Value())px</strong>
        <label class="input-slider">
            <input type="range" @bind-value="@_sizeInt" @bind-value:event="oninput" @onchange="ValueChanged" min="@((int)IconSize.SM)" max="@((int)IconSize.XXXL)" step="1" />
            <progress @bind-value="@_sizeInt" @bind-value:event="onchange" max="@((int)IconSize.XXXL)" />
        </label>
    </div>
    <hr class="-mx-4 border-black/10 dark:border-white/10" />
    <div class="text-center">
        <small>@Filters.Type, Fill: @Filters.Fill.Value(), Weight: @Filters.Weight.Value(), Grade: @Filters.Grade.Value(), Optical Size: @Filters.Size.Value()</small>
    </div>
    <div class="my-2">
        <button tabindex="-1" @onclick="ResetFilters" class="flex w-full cursor-pointer items-center justify-center rounded-full select-none bg-transparent outline outline-primary text-primary hover:text-white hover:bg-primary active:bg-primary-700 active:outline-primary-700">
            <Icon Name="@Icons.Refresh" class="p-2" />
            <span class="block pr-3">Reset to defaults</span>
        </button>
    </div>
    <hr class="-mx-4 border-black/10 dark:border-white/20" />
    <h3 class="font-bold">Usage instructions</h3>
    <p>
        Install the <a href="https://www.nuget.org/packages/BlazorMaterialSymbols" class="text-primary underline" target="_blank">Blazor Material Symbols</a> nuget package.
    </p>
    <code class="px-4 py-10 block text-center rounded relative bg-neutral-200 dark:bg-neutral-800">
        <button @onclick="CopyToClipboard" tabindex="-1" class="absolute top-1 right-1 rounded-full select-none active:bg-black/10 dark:active:bg-white/10">
            <Icon Name="@Icons.ContentCopy" class="p-3" />
        </button>
        <small class="block">@Filters.DefaultsClipboardText()</small>
    </code>
    <small class="block">
        Use current settings as defaults for the IconManager component, by copy/pasting the above code into your MainLayout.razor file.
    </small>
    <small class="block">
        That's it, you can now copy (or download svg) symbols.
    </small>
    <hr class="-mx-4 border-black/10 dark:border-white/20" />
    <div class="my-2">
        <a href="@_googleLink" target="google_fonts" class="flex flex-row items-center justify-center gap-2 justify-center w-full cursor-pointer select-none rounded-full bg-transparent outline outline-primary text-primary hover:text-white hover:bg-primary active:bg-primary-700 active:outline-primary-700">
            <span class="block truncate py-2 pl-3">View in Google Fonts</span>
            <Icon Name="@Icons.OpenInNew" class="p-2" />
        </a>
    </div>
</EditForm>

@code {
    [Parameter]
    public FilterParams Filters { get; set; } = null!;

    [Parameter]
    public EventCallback<FilterParams> FiltersChanged { get; set; }

    EditContext _context = null!;
    Timer? _timer;

    int _weightInt { get => (int)Filters.Weight; set => Filters.Weight = (IconWeight)value; }
    int _gradeInt { get => (int)Filters.Grade; set => Filters.Grade = (IconGrade)value; }
    int _sizeInt { get => (int)Filters.Size; set => Filters.Size = (IconSize)value; }
    string _googleLink { get => $"https://fonts.google.com/icons?selected=Material+Symbols+Outlined:search:FILL@{Filters.Fill.Value()};wght@{Filters.Weight.Value()};GRAD@{Filters.Grade.Value()};opsz@{Filters.Size.Value()}&icon.style={Enum.GetName(typeof(IconType), Filters.Type)}"; }

    protected override async Task OnInitializedAsync()
    {
        _context = new EditContext(Filters);
        _context.OnFieldChanged += OnFieldChanged;
        await base.OnInitializedAsync();
    }

    private void OnFieldChanged(object? sender = null, FieldChangedEventArgs? e = null)
    {
        FiltersChanged.InvokeAsync(Filters);
        JSRuntime.InvokeVoidAsync("localStorage.setItem", new object[] { "_filters", JsonSerializer.Serialize(Filters) });
    }

    private void ValueChanged()
    {
        OnFieldChanged();
    }

    private Task CopyToClipboard()
    {
        Filters.OnCopyDefaultsToClipboard += ShowCopiedMessage;
        return Filters.CopyDefaultsToClipboard();
    }

    void ShowCopiedMessage(object? sender, EventArgs e)
    {
        SetMessageTimer(2000);
    }

    void SetMessageTimer(int timeout)
    {
        if (_timer != null)
        {
            _timer.Stop();
        }

        _timer = new(2000);
        _timer.Elapsed += ResetMessage;
        _timer.Start();
    }

    void ResetMessage(object? source, ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    void ResetFilters()
    {
        var darkMode = Filters.DarkMode;
        var fontDownload = Filters.DownloadSvg;
        Filters = new(JSRuntime)
        {
            DarkMode = darkMode,
            DownloadSvg = fontDownload
        };
        JSRuntime.InvokeVoidAsync(Interops.LocalStorage_SetItem, new object[] { "_filters", JsonSerializer.Serialize(Filters) });
    }
}
